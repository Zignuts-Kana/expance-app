<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
  </head>

  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
     <% if (typeof storeUserAndToken != 'undefined') { %>
      const user = {
        _id :'<%- storeUserAndToken.id %>',
        token:'<%- storeUserAndToken.authToken %>'
      }
      localStorage.setItem('user',JSON.stringify(user));
      localStorage.setItem('token','<%-storeUserAndToken.authToken%>');
      // userAction = ()=>{
      //   let response =fetch('http://localhost:1337/welcome',{
      //     method:'GET',
      //     headers:{
      //       'Accept': 'text/html, application/xhtml+xml, application/xml;q=0.9, image/webp, */*',
      //       'Authorization':`Bearer ${localStorage.getItem('token')}`
      //     }
      //   });
      //   response =response.text();
      //   console.log(response);
      //   // document.write(response);
      // }
      // userAction()

      // // window.location.href='http://localhost:1337/';
    <% } %>
    <% if(typeof account != 'undefined'){%>
      localStorage.setItem('account','<%- account.id %>')
      <% } %>

    const createExpanceForm = document.getElementById("createExpanceForm");
    if (createExpanceForm) {
      createExpanceForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const formData = new FormData(createExpanceForm);
        let user = localStorage.getItem("user");
        const account = localStorage.getItem("account");
        if (user && account) {
          user = JSON.parse(user);
          const userAction = async () => {
            const response = fetch(
              `http://localhost:1337/user/${user._id}/account/${account}/expance/create`,
              {
                method: "POST",
                body:formData,
                headers: {
                  Accept:
                    "text/html, application/xhtml+xml, application/xml;q=0.9, image/webp, */*",
                  Authorization: `Bearer ${localStorage.getItem("token")}`,
                },
              }
            );
            // response = await response.text();
            // console.log(response);
            history.back()
            // document.write(response);
          };
          userAction();
        }
      });
    }

    const patnerReqForm = document.getElementById('patnerReqForm');
    if (patnerReqForm) {
      patnerReqForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const formData = new FormData(patnerReqForm);
        let user = localStorage.getItem("user");
        let account = localStorage.getItem('account');
        if (user) {
          user = JSON.parse(user);
          const userAction = async () => {
            const response = await fetch(
              `http://localhost:1337/user/${user._id}/account/patner/create`,
              {
                method: "POST",
                body:formData,
                headers: {
                  Accept:
                    "text/html, application/xhtml+xml, application/xml;q=0.9, image/webp, */*",
                  Authorization: `Bearer ${localStorage.getItem("token")}`,
                },
              }
            );
            // location.href = `http://localhost:1337/account/${account}`;
            history.back()
            // document.write(response);
          };
          userAction();
        }
      });
      
    }

    const createAccountForm = document.getElementById('createAccountForm');
    if (createAccountForm) {
      createAccountForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const formData = new FormData(createAccountForm);
        let user = localStorage.getItem("user");
        if (user) {
          user = JSON.parse(user);
          const userAction = async () => {
            console.log('req send');
            const response = fetch(
              `http://localhost:1337/user/${user._id}/account/create`,
              {
                method: "POST",
                body:formData,
                headers: {
                  Accept:
                    "text/html, application/xhtml+xml, application/xml;q=0.9, image/webp, */*",
                  Authorization: `Bearer ${localStorage.getItem("token")}`,
                },
              }
            );
            // response = await response.text();
            // console.log(response);
            // location.href = `http://localhost:1337/account/${account}`;
            history.back()
            // document.write(response);
          };
          userAction();
        }
      });
    }

    const updateAccountForm = document.getElementById('updateAccountForm');
    if (updateAccountForm) {
      updateAccountForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const formData = new FormData(updateAccountForm);
        let user = localStorage.getItem("user");
        let account = localStorage.getItem('account');
        if (user && account) {
          user = JSON.parse(user);
          const userAction = async () => {
            const response = fetch(
              `http://localhost:1337/user/${user._id}/account/${account}`,
              {
                method: "POST",
                body:formData,
                headers: {
                  Accept:
                    "text/html, application/xhtml+xml, application/xml;q=0.9, image/webp, */*",
                  Authorization: `Bearer ${localStorage.getItem("token")}`,
                },
              }
            );
            // response = await response.text();
            // console.log(response);
            // location.href = `http://localhost:1337/account/${account}`;
            history.back();
            // document.write(response);
          };
          userAction();
        }
      });
    }

    const editExpanceForm = document.getElementById("editExpanceForm");
    if (editExpanceForm) {
        editExpanceForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const formData = new FormData(editExpanceForm);
        let user = localStorage.getItem("user");
        const account = localStorage.getItem("acount");
        let expance = location.href;
        expance = expance.split('/edit/')[1];
        if (user && account) {
          user = JSON.parse(user);
          const userAction = async () => {
            const response = fetch(
              `http://localhost:1337/user/${user._id}/account/${account}/expance/edit/${expance}`,
              {
                method: "POST",
                body:formData,
                headers: {
                  Accept:
                    "text/html, application/xhtml+xml, application/xml;q=0.9, image/webp, */*",
                  Authorization: `Bearer ${localStorage.getItem("token")}`,
                },
              }
            );
            // response = await response.text();
            // console.log(response);
            // location.href = `http://localhost:1337/account/${account}`;
            history.back();
            // document.write(response);
          };
          userAction();
        }
      });
    }

    function alertAcceptClicked(url){
            userAction = async ()=>{
            let response = await fetch(`${url}`,{
              method:'GET',
              headers:{
                'Accept': "*/*,application/json",
                'Authorization':`Bearer ${localStorage.getItem('token')}`
              }
            });
            location.reload();
          }
          userAction()
    }
    function alertPatnerReject(url){
      userAction = async ()=>{
            let response = await fetch(`${url}`,{
              method:'GET',
              headers:{
                'Accept': "*/*,application/json",
                'Authorization':`Bearer ${localStorage.getItem('token')}`
              }
            });
          }
          userAction()
    }

    const chooseAccount = document.getElementById('chooseAccount');
    const chooseOwner = document.getElementById('chooseOwner');
    console.log(chooseAccount);
    if (chooseAccount && chooseOwner) {
      chooseOwner.addEventListener('change',()=>{
        console.log('here');
            const ownerId = chooseOwner.value;
            userAction = async ()=>{
            let response = await fetch(`http://localhost:1337/user/${ownerId}/accounts`,{
              method:'GET',
              headers:{
                'Accept': "*/*,application/json",
                'Authorization':`Bearer ${localStorage.getItem('token')}`
              }
            });
            response = await response.json();
            console.log(response);
            let html='<option></option>\n';
            response.forEach((account)=>{
                html = html + `<option value="${account.id}">${account.accountName}</option>\n`;
            })
    
            chooseAccount.innerHTML = html;
            // document.write(response);
          }
          userAction()  
        })
    }

    const navLogOut = document.getElementById('navLogOut');
    if (navLogOut) {

      navLogOut.addEventListener('click',()=> {
        let isExecuted = confirm(`Are you sure about Logout?`);
        if (isExecuted) {
          const userAction = async () => {
            const response = await fetch(`http://localhost:1337/user/logOut`, {
              method: "GET",
              headers: {
                "Authorization":`Bearer ${localStorage.getItem('token')}`
              },
            });
          };

          userAction();
          localStorage.removeItem('user');
          localStorage.removeItem('token');
          localStorage.removeItem('account');

          return window.location.href = "http://localhost:1337/";
        }
      })
    }
  </script>
  </body>
</html>
